<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>IMU Sensor Visualization</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> <!-- 引入 Chart.js -->
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }
        .axis-label {
            font-size: 16px;
            fill: #000;
        }
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            width: 100%;
            height: 100%;
        }
        #waterIntakeChartContainer {
            margin: 20px auto;
            width: 400px;
            height: 400px;
        }
    </style>
</head>
<body>
    <h1 style="text-align:center">AquaTrack</h1>
    <!-- <div style="text-align:center">Current Sensor Values: <span id="sensorValues">Loading...</span></div> -->
    <div style="text-align:center; display:none;">Current Sensor Values: <span id="sensorValues">Loading...</span></div>

    <div style="text-align:center">
        Calculated Angle (Arc Cotangent): <span id="calculatedAngle">Loading...</span>
    </div>
    

    <!-- 新增饼图 -->
    <div id="waterIntakeChartContainer">
        <canvas id="waterChart"></canvas>
    </div>


    <!-- <svg id="accelerationChart"></svg>
    <svg id="gyroscopeChart"></svg> -->
    <svg id="angleChart"></svg>
    <svg id="waterIntakeChart"></svg>


    <script type="application/javascript">
        const SERVERADDRESS = "http://127.0.0.1:3000/data";
        const margin = { top: 60, right: 60, bottom: 20, left: 80 };
        // const width = window.innerWidth - margin.left - margin.right;
        // const height = (window.innerHeight - margin.top - margin.bottom) / 2 - 50;
        const width = 600; 
        const height = 300; 

        // 初始化加速度和陀螺仪数据
        let accelerationData = { x: [], y: [], z: [] };
        let gyroscopeData = { x: [], y: [], z: [] };
        let angleData = [];

        // 创建 x 和 y 轴的比例尺
        const xScale = d3.scaleLinear().domain([0, 50]).range([0, width]);
        // const yScale = d3.scaleLinear().domain([-200, 200]).range([height, 0]);
        const yScaleAcceleration = d3.scaleLinear().domain([-2, 2]).range([height, 0]);
        const yScaleGyroscope = d3.scaleLinear().domain([-300, 300]).range([height, 0]);
        const yScaleAngle = d3.scaleLinear().domain([-90, 90]).range([height, 0]);


        const createChart = (id, yScale) => {
            const svg = d3.select(id)
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            // 创建 x 和 y 轴
            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", `translate(0,${height})`)
                .call(d3.axisBottom(xScale));

            svg.append("g")
                .attr("class", "y axis")
                .call(d3.axisLeft(yScale));

            return svg;
        };


        const accelerationSvg = createChart("#accelerationChart", yScaleAcceleration);
        const gyroscopeSvg = createChart("#gyroscopeChart", yScaleGyroscope);
        const angleSvg = createChart("#angleChart", yScaleAngle);


        // 创建折线生成器
        const lineGenerator = (key, yScale) => d3.line()
            .x((d, i) => xScale(i))
            .y(d => yScale(d))
            .curve(d3.curveBasis);

        // 初始化路径元素
        const initPath = (svg, color) => svg.append("path")
            .datum([])
            .attr("class", "line")
            .attr("stroke", color);

        const paths = {
            acceleration: {
                x: initPath(accelerationSvg, "red"),
                y: initPath(accelerationSvg, "blue"),
                z: initPath(accelerationSvg, "green")
            },
            gyroscope: {
                x: initPath(gyroscopeSvg, "red"),
                y: initPath(gyroscopeSvg, "blue"),
                z: initPath(gyroscopeSvg, "green")
            },
            angle: initPath(angleSvg, "red")
        };









        // 更新折线图函数
        function updateChart(data, paths, svg, yScale) {
            Object.keys(data).forEach(key => {
                paths[key].datum(data[key])
                    .attr("d", lineGenerator(key, yScale));
            });
        }

        function updateAngleChart(data, path, svg, yScale) {
            path.datum(data)
                .attr("d", d3.line()
                    .x((d, i) => xScale(i))
                    .y(d => yScale(d))
                    .curve(d3.curveBasis)
                );
        }





        let currentState = "initial";
        let stableStartTime = null;
        const stableDurationThreshold = 1000; // 1s
        let drinkStartIndex = null;
        const colorDrinkBackground = "rgba(173, 216, 230, 0.3)";


        // 创建背景区域
        const createBackgroundArea = (svg) => svg.append("rect")
            .attr("class", "background-area")
            .attr("x", 0)
            .attr("y", 0)
            .attr("width", 0)
            .attr("height", height)
            .style("fill", colorDrinkBackground)
            .style("opacity", 0);

        // 初始化背景区域
        const drinkBackgrounds = {
            acceleration: createBackgroundArea(accelerationSvg),
            gyroscope: createBackgroundArea(gyroscopeSvg),
            angle: createBackgroundArea(angleSvg),
        };

        function updateBackgroundArea(path, startIndex, endIndex) {
            // 检查 startIndex 和 endIndex 是否为有效数值
            if (typeof startIndex === 'number' && typeof endIndex === 'number' && !isNaN(startIndex) && !isNaN(endIndex)) {
                const startX = xScale(startIndex);
                const endX = xScale(endIndex);

                // 检查 startX 和 endX 是否为有效数值
                if (!isNaN(startX) && !isNaN(endX)) {
                    path.attr("x", startX)
                        .attr("width", Math.max(0, endX - startX))
                        .style("opacity", 1);
                } else {
                    console.warn("Invalid startX or endX:", startX, endX);
                    path.style("opacity", 0);
                }
            } else {
                console.warn("Invalid startIndex or endIndex:", startIndex, endIndex);
                path.style("opacity", 0);
            }
        }

        // 重置背景区域
        function resetBackgroundArea() {
            Object.values(drinkBackgrounds).forEach(path => {
                path.style("opacity", 0);
            });
        }



        function mapDrinkDurationToVolume(duration) {
            // 配置映射范围（可以根据实际数据调整）
            const minDuration = 1.5; // 最短喝水时间（秒）
            const maxDuration = 10.0; // 最长喝水时间（秒）
            const minVolume = 20; // 最小喝水量（ml）
            const maxVolume = 300; // 最大喝水量（ml）

            // 限制 duration 在有效范围内
            const clampedDuration = Math.max(minDuration, Math.min(duration, maxDuration));

            // 线性映射公式
            const drinkVolume = minVolume + (clampedDuration - minDuration) * (maxVolume - minVolume) / (maxDuration - minDuration);

            return drinkVolume;
        }
        
        function detectDrinkingBehavior(angle, currentIndex) {
            const currentTime = Date.now();

            switch (currentState) {
                case "initial":
                    if (angle > -70 && angle < -1) {   // 范围尽量宽一些，不能错过
                        currentState = "start tilting";
                        // console.log("start tilting");
                    }
                    break;

                case "start tilting":
                    // if (angle >= -60 && angle < -10) {      // 慢慢地变到更小的角度，再开始计时
                    if (angle >= -75 && angle < -50) { 
                        currentState = "start tilting";
                        // stableStartTime = currentIndex;
                        // console.log("start tilting ----->");
                    }
                    if (angle >= -50 && angle <= 20) {
                        currentState = "keep tilting";
                        stableStartTime = currentTime;
                        stableStartIndex = currentIndex;                        
                        // console.log("keep tilting");
                    }
                    else {
                        currentState = "initial";
                        // console.log("-----initial-----");
                    }
                    break;

                case "keep tilting":
                    if (angle >= -50 && angle <= 20) {
                        stableStartIndex = Math.max(stableStartIndex - 1, 0);
                        if (currentTime - stableStartTime > stableDurationThreshold) {
                            // console.log("stablestarttime: ", stableStartTime);
                            // console.log("currenttime:", currentTime)
                            // console.log("Detected drinking behavior!");
                            currentState="drink";
                            // drinkStartIndex = currentIndex;
                            drinkStartIndex = stableStartIndex;
                        }
                    } else {
                        currentState = "initial";
                        // console.log("back to -----initial-----");
                        resetBackgroundArea();
                        
                    }
                    break;
                
                case "drink":
                    if (angle >= -50 && angle <= 20) {
                        currentState="drink";
                        // console.log("Continue drinking!");
                        drinkStartIndex = Math.max(drinkStartIndex - 1, 0);
                        // console.log(drinkStartIndex);
                        // console.log(currentIndex);
                        // console.log("---------------------");
                        updateBackgroundArea(drinkBackgrounds.acceleration, drinkStartIndex, currentIndex);
                        updateBackgroundArea(drinkBackgrounds.gyroscope, drinkStartIndex, currentIndex);
                        updateBackgroundArea(drinkBackgrounds.angle, drinkStartIndex, currentIndex);

                    } else {
                        currentState = "initial";
                        // console.log("stop drinking, back to -----initial-----");
                                        // 记录喝水行为
                        console.log("drink duration: ", (currentTime-stableStartTime)/1000.0);
                        drinkduration=(currentTime-stableStartTime)/1000.0;
                        const endTime = currentTime;
                        // const amount = Math.floor(Math.random() * (40 - 20 + 1)) + 20;  

                        const amount = mapDrinkDurationToVolume(drinkduration);
                        console.log("intake: ", amount);
                        recordWaterIntake(stableStartTime, endTime, amount);
                        

                        lastDrinkTime = currentTime; // 更新最后一次喝水时间
                        stopBlinking(); // 停止屏幕闪烁提示
                        
                        resetBackgroundArea();
                    }
                    break;                
               
                default:
                    currentState = "initial";
            }
        }







        let currentIndex = 0;

        // 获取传感器数据的函数
        function getData() {
            fetch(SERVERADDRESS, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(dataResponse => {
                const sensorValues = dataResponse.sensorValues;
                document.getElementById('sensorValues').innerText = sensorValues.join(", ");

                // 更新加速度数据
                if (accelerationData.x.length >= 50) {
                    accelerationData.x.shift();
                    accelerationData.y.shift();
                    accelerationData.z.shift();
                }
                accelerationData.x.push(sensorValues[0]);
                accelerationData.y.push(sensorValues[1]);
                accelerationData.z.push(sensorValues[2]);

                // 更新陀螺仪数据
                if (gyroscopeData.x.length >= 50) {
                    gyroscopeData.x.shift();
                    gyroscopeData.y.shift();
                    gyroscopeData.z.shift();
                }
                gyroscopeData.x.push(sensorValues[3]);
                gyroscopeData.y.push(sensorValues[4]);
                gyroscopeData.z.push(sensorValues[5]);
                
                // 计算新的角度值
                const ax = sensorValues[0];
                const ay = sensorValues[1];
                const az = sensorValues[2];
                const calculatedAngle = Math.atan2(ax, Math.sqrt(ay * ay + az * az)) * (180 / Math.PI);

                // 更新页面显示
                document.getElementById('calculatedAngle').innerText = calculatedAngle.toFixed(2) + " degrees";

                if (angleData.length >= 50) {
                    angleData.shift();
                }
                angleData.push(calculatedAngle);
                detectDrinkingBehavior(calculatedAngle, currentIndex);
                currentIndex = Math.min(currentIndex + 1, 49)

                // 更新折线图
                updateChart(accelerationData, paths.acceleration, accelerationSvg, yScaleAcceleration);
                updateChart(gyroscopeData, paths.gyroscope, gyroscopeSvg, yScaleGyroscope);
                updateAngleChart(angleData, paths.angle, angleSvg, yScaleAngle);
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
        }







        // 定义图表的边距和大小
        const waterChartMargin = { top: 20, right: 30, bottom: 40, left: 50 };
        const waterChartWidth = 600;
        const waterChartHeight = 300;

        // 定义比例尺
        const waterXScale = d3.scaleLinear() // 水量比例尺（横向增长）
            .domain([0,300]) // 假设最大水量是 500ml
            .range([0, waterChartWidth]);

        const waterYScale = d3.scaleTime() // 时间比例尺（从上到下时间递增）
            .range([0, waterChartHeight]);

        // 创建 SVG 容器
        const waterSvg = d3.select("#waterIntakeChart")
            .attr("width", waterChartWidth + waterChartMargin.left + waterChartMargin.right)
            .attr("height", waterChartHeight + waterChartMargin.top + waterChartMargin.bottom)
            .append("g")
            .attr("transform", `translate(${waterChartMargin.left},${waterChartMargin.top})`);

        // 添加坐标轴容器
        waterSvg.append("g")
            .attr("class", "x-axis")
            .attr("transform", `translate(0,0)`); // X 轴放置在顶部

        waterSvg.append("g")
            .attr("class", "y-axis");

        // 添加 Y 轴标签
        waterSvg.append("text")
            .attr("class", "axis-label")
            .attr("x", -waterChartHeight / 2)
            .attr("y", -40)
            .attr("transform", "rotate(-90)")
            .attr("text-anchor", "middle")
            .text("Time");








        // 按钮 开始记录时间戳和喝水量
        const startButton = document.createElement("button");
        startButton.innerText = "Start Recording";
        startButton.style.cssText = `
            padding: 10px 20px;
            font-size: 16px;
            margin-right: 10px;
            position: fixed;
            top: 10px;
            left: 180px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        `;
        startButton.onclick = () => {
            startRecording(); // 原有功能：开始记录
            targetWaterAmount = parseInt(prompt("Please input your water intake GOAL："), 10);
            if (isNaN(targetWaterAmount) || targetWaterAmount <= 0) {
                alert("请输入一个有效的目标量！");
                return;
            }
            currentWaterAmount = 0; // 重置当前喝水量
            isRecording = true; // 开启记录状态
            initializeWaterChart(); // 初始化饼图
            console.log(`目标喝水量设置为 ${targetWaterAmount}ml`);
        };
        document.body.appendChild(startButton);

        const stopButton = document.createElement("button");
        stopButton.innerText = "Stop Recording";
        stopButton.style.cssText = `
            padding: 10px 20px;
            font-size: 16px;
            margin-right: 10px;
            position: fixed;
            top: 10px;
            left: 10px;
            background-color: #f44336;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        `;
        stopButton.onclick = () => {
            stopRecording(); // 原有功能：停止记录
            isRecording = false; // 停止喝水记录状态
            alert(`Stop recording. The total water intake is ${currentWaterAmount}ml, ${Math.min(
                (currentWaterAmount / targetWaterAmount) * 100,
                100
            ).toFixed(2)}% of the goal.`);
        };
        document.body.appendChild(stopButton);

        // 开始记录
        function startRecording() {
            isRecording = true;
            recordingStartTime = new Date(); // 重置记录开始时间
            waterIntakeData = []; // 清空之前的数据
            console.log("开始记录喝水行为...");
        }

        // 结束记录
        function stopRecording() {
            isRecording = false;
            console.log("结束记录喝水行为...");
        }






        // 喝水量记录----------------------------------------------------------------------------------------------
        let targetWaterAmount = 0; // 用户输入的目标喝水量（ml）
        let currentWaterAmount = 0; // 当前累计的喝水量（ml）
        // let isRecording = false; // 是否正在记录
        let waterChart = null; // 饼图实例

        // 初始化饼图
        function initializeWaterChart() {
            const ctx = document.getElementById("waterChart").getContext("2d");
            waterChart = new Chart(ctx, {
                type: "doughnut",
                data: {
                    labels: ["Remaining Water", "Water Left to Goal"],
                    datasets: [
                        {
                            label: "Drinking Progress",
                            data: [currentWaterAmount, targetWaterAmount - currentWaterAmount],
                            backgroundColor: ["#4CAF50", "#E0E0E0"],
                            borderWidth: 1,
                        },
                    ],
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                },
            });
        }

        // 更新饼图
        function updateWaterChart() {
            if (waterChart) {
                waterChart.data.datasets[0].data = [
                    currentWaterAmount,
                    Math.max(targetWaterAmount - currentWaterAmount, 0),
                ];
                waterChart.update();
            }
        }






        // 喝水时间戳加喝水量----------------------------------------------------------------------------------------------
        let waterIntakeData = []; // 喝水数据
        let isRecording = false; // 是否正在记录
        let recordingStartTime = null; // 记录开始时间
        // 记录喝水行为数据
        // function recordWaterIntake(startTime, endTime, amount) {
        //     if (!isRecording) return; // 只有在记录状态下才记录数据
        //     const waterstartTime = new Date(); // 当前时间
        //     waterIntakeData.push({
        //         time: waterstartTime,
        //         amount: 10
        //     });
            
        //     // console.log(`Recorded drinking: ${amount}ml at ${new Date(waterstartTime).toLocaleTimeString()}`);
        //     updateWaterIntakeChart();
        //     waterIntakeData.pop();
        //     waterIntakeData.push({
        //         time: waterstartTime,
        //         amount: amount
        //     });
        //     currentWaterAmount += amount; // 更新当前喝水量

        //     // 延迟 5 秒后更新饼图
        //     setTimeout(() => {
        //         currentWaterAmount += amount; // 更新当前喝水量
        //         updateWaterIntakeChart();
        //         updateWaterChart(); // 更新饼图
        //         console.log("Water chart updated after 5 seconds delay.");
        //     }, 5000); // 延迟 5000 毫秒
        //     // updateWaterChart(); // 更新饼图
        // }


        function recordWaterIntake(startTime, endTime, amount) {
            if (!isRecording) return; // 只有在记录状态下才记录数据

            const waterstartTime = new Date(); // 当前时间

            // 添加初始虚拟数据
            waterIntakeData.push({
                time: waterstartTime,
                amount: 10
            });

            console.log("Executing updateWaterIntakeChart() - First call.");
            updateWaterIntakeChart(); // 第一次立即更新

            // 延迟 5 秒后执行更新为实际数据
            setTimeout(() => {
                console.log("Updating to actual data after 5 seconds.");

                // 修改为实际数据
                waterIntakeData.pop(); // 移除虚拟数据
                waterIntakeData.push({
                    time: waterstartTime,
                    amount: amount // 实际数据
                });

                currentWaterAmount += amount; // 更新当前喝水量

                // 更新图表
                updateWaterIntakeChart(); // 第二次更新水量图表
                updateWaterChart(); // 更新饼图
                console.log("Water intake chart and water chart updated to actual data.");
            }, 5000); // 延迟 5 秒
        }


        // 更新条形图
        function updateWaterIntakeChart() {
            if (waterIntakeData.length === 0) return;

            // const startTime = waterIntakeData[0]?.time || new Date(); // 最早时间
            const startTime = recordingStartTime || waterIntakeData[0]?.time || new Date();
            const endTime = new Date(); // 当前时间
            waterYScale.domain([startTime, endTime]); // 时间映射到 Y 轴

            // 动态计算条形高度
            const padding = 2; // 条形间距
            const maxBarHeight = 2; // 最大条形高度
            const barHeight = Math.min(maxBarHeight, Math.max(1, (waterChartHeight / waterIntakeData.length) - padding));

            // 定义颜色比例尺
            const colorScale = d3.scaleLinear()
                .domain([0, 300]) // 假设水量范围是 0 到 500 ml
                .range(["#d0e7ff", "#003f88"]); // 从浅蓝到深蓝

            // 绑定数据
            const bars = waterSvg.selectAll(".bar")
                .data(waterIntakeData, d => d.time);

            // 进入阶段
            bars.enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", 0) // 条形从左侧开始
                .attr("y", d => waterYScale(d.time)) // 根据时间决定条形的 Y 坐标
                .attr("width", d => waterXScale(d.amount)) // 条形宽度由水量决定
                .attr("height", barHeight) // 条形高度固定或动态计算
                .style("fill", d => colorScale(d.amount));

            // 更新阶段
            bars.attr("x", 0)
                .attr("y", d => waterYScale(d.time))
                .attr("width", d => waterXScale(d.amount))
                .attr("height", barHeight)
                .style("fill", d => colorScale(d.amount));

            // 退出阶段
            bars.exit().remove();

            // 初始化 `dynamicTicks`
            let dynamicTicks = []; // 定义动态生成的 Ticks
            // 动态调整 Y 轴 Tick
            const timeSpan = endTime - startTime; // 当前时间跨度（以毫秒为单位）
            if (timeSpan <= 5 * 60 * 1000) { // 如果时间跨度 <= 5 分钟
                dynamicTicks = d3.timeTicks(startTime, endTime, 3); 
                console.log(dynamicTicks);
            } else { // 如果时间跨度 > 5 分钟
                dynamicTicks = d3.timeTicks(startTime, endTime, 6); 
            }

            // 自定义 Tick 的时间点
            const customTicks = [
                recordingStartTime instanceof Date ? recordingStartTime : null, // 确保是 Date
                ...(Array.isArray(waterIntakeData) ? waterIntakeData.map(d => d.time) : []), // 确保 map 返回数组
                endTime instanceof Date ? endTime : null // 确保是 Date
            ];
            // const customTicks=[...(Array.isArray(waterIntakeData) ? waterIntakeData.map(d => d.time) : [])]

            // 合并 Tick 的时间点，并去重
            const tickValues = Array.from(new Set([...dynamicTicks, ...customTicks]));

            // 更新坐标轴
            waterSvg.select(".x-axis").call(d3.axisTop(waterXScale)); // X 轴显示水量（放在顶部）
            waterSvg.select(".y-axis").call(
                d3.axisLeft(waterYScale)
                    .tickValues(tickValues) // 自定义 Tick 时间点
                    .tickFormat(d3.timeFormat("%H:%M:%S")) // 格式化时间显示
            );
        }

        // 自动更新横轴范围
        setInterval(() => {
            const endTime = new Date();
            const startTime = waterIntakeData[0]?.time || endTime;
            waterYScale.domain([startTime, endTime]);
            updateWaterIntakeChart();
        }, 1000);











        // 喝水提醒----------------------------------------------------------------------------------------------
        let lastDrinkTime = null; // 记录最后一次喝水时间
        let blinkInterval = null; // 控制屏幕闪烁的定时器
        let reminderInterval = null; // 喝水提醒的定时器
        const blinkDuration = 600; // 闪烁间隔（毫秒）

        function startBlinking() {
            if (!blinkInterval) {
                blinkInterval = setInterval(() => {
                    document.body.style.backgroundColor =
                        document.body.style.backgroundColor === "red" ? "white" : "red";
                }, blinkDuration);
            }
        }

        function stopBlinking() {
            if (blinkInterval) {
                clearInterval(blinkInterval);
                blinkInterval = null;
                document.body.style.backgroundColor = "white"; // 恢复正常背景色
            }
        }

        function startWaterReminder() {
            if (!reminderInterval) {
                reminderInterval = setInterval(() => {
                    const currentTime = Date.now();
                    if (lastDrinkTime && currentTime - lastDrinkTime > 5000) { // 超过1分钟
                        startBlinking();
                    }
                }, 1000);
            }
        }

        function stopWaterReminder() {
            if (reminderInterval) {
                clearInterval(reminderInterval);
                reminderInterval = null;
                stopBlinking();
            }
        }

        // 动态创建 "开始喝水提醒" 按钮
        const startReminderButton = document.createElement("button");
        startReminderButton.innerText = "Start reminding";
        startReminderButton.style.cssText = `
            padding: 10px 20px;
            font-size: 16px;
            position: fixed;
            top: 10px;
            right: 180px;
            z-index: 1000;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        `;
        startReminderButton.onclick = () => {
            lastDrinkTime = Date.now(); // 初始化最后一次喝水时间
            startWaterReminder(); // 启动提醒
        };
        document.body.appendChild(startReminderButton);

        // 动态创建 "停止喝水提醒" 按钮
        const stopReminderButton = document.createElement("button");
        stopReminderButton.innerText = "Stop reminding";
        stopReminderButton.style.cssText = `
            padding: 10px 20px;
            font-size: 16px;
            position: fixed;
            top: 10px;
            right: 10px;
            z-index: 1000;
            background-color: #f44336;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        `;
        stopReminderButton.onclick = () => {
            stopWaterReminder(); // 停止提醒
        };
        document.body.appendChild(stopReminderButton);





        // 每秒获取一次数据
        setInterval(getData, 100);


    </script>
</body>
</html>