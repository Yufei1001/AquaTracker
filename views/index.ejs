<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>IMU Sensor Visualization</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }
        .axis-label {
            font-size: 16px;
            fill: #000;
        }
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <h1 style="text-align:center">IMU Visualization</h1>
    <div style="text-align:center">Current Sensor Values: <span id="sensorValues">Loading...</span></div>

    <div style="text-align:center">
        Current Sensor Values: <span id="sensorValues">Loading...</span><br>
        Calculated Angle (Arc Cotangent): <span id="calculatedAngle">Loading...</span>
    </div>
    

    <svg id="accelerationChart"></svg>
    <svg id="gyroscopeChart"></svg>
    <svg id="angleChart"></svg>
    <svg id="waterIntakeChart"></svg>


    <script type="application/javascript">
        const SERVERADDRESS = "http://127.0.0.1:3000/data";
        const margin = { top: 60, right: 60, bottom: 20, left: 80 };
        // const width = window.innerWidth - margin.left - margin.right;
        // const height = (window.innerHeight - margin.top - margin.bottom) / 2 - 50;
        const width = 600; 
        const height = 300; 

        // 初始化加速度和陀螺仪数据
        let accelerationData = { x: [], y: [], z: [] };
        let gyroscopeData = { x: [], y: [], z: [] };
        let angleData = [];

        // 创建 x 和 y 轴的比例尺
        const xScale = d3.scaleLinear().domain([0, 50]).range([0, width]);
        // const yScale = d3.scaleLinear().domain([-200, 200]).range([height, 0]);
        const yScaleAcceleration = d3.scaleLinear().domain([-2, 2]).range([height, 0]);
        const yScaleGyroscope = d3.scaleLinear().domain([-300, 300]).range([height, 0]);
        const yScaleAngle = d3.scaleLinear().domain([-90, 90]).range([height, 0]);


        const createChart = (id, yScale) => {
            const svg = d3.select(id)
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            // 创建 x 和 y 轴
            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", `translate(0,${height})`)
                .call(d3.axisBottom(xScale));

            svg.append("g")
                .attr("class", "y axis")
                .call(d3.axisLeft(yScale));

            return svg;
        };


        const accelerationSvg = createChart("#accelerationChart", yScaleAcceleration);
        const gyroscopeSvg = createChart("#gyroscopeChart", yScaleGyroscope);
        const angleSvg = createChart("#angleChart", yScaleAngle);


        // 创建折线生成器
        const lineGenerator = (key, yScale) => d3.line()
            .x((d, i) => xScale(i))
            .y(d => yScale(d))
            .curve(d3.curveBasis);

        // 初始化路径元素
        const initPath = (svg, color) => svg.append("path")
            .datum([])
            .attr("class", "line")
            .attr("stroke", color);

        const paths = {
            acceleration: {
                x: initPath(accelerationSvg, "red"),
                y: initPath(accelerationSvg, "blue"),
                z: initPath(accelerationSvg, "green")
            },
            gyroscope: {
                x: initPath(gyroscopeSvg, "red"),
                y: initPath(gyroscopeSvg, "blue"),
                z: initPath(gyroscopeSvg, "green")
            },
            angle: initPath(angleSvg, "red")
        };









        // 更新折线图函数
        function updateChart(data, paths, svg, yScale) {
            Object.keys(data).forEach(key => {
                paths[key].datum(data[key])
                    .attr("d", lineGenerator(key, yScale));
            });
        }

        function updateAngleChart(data, path, svg, yScale) {
            path.datum(data)
                .attr("d", d3.line()
                    .x((d, i) => xScale(i))
                    .y(d => yScale(d))
                    .curve(d3.curveBasis)
                );
        }





        let currentState = "initial";
        let stableStartTime = null;
        const stableDurationThreshold = 1000; // 1s
        let drinkStartIndex = null;
        const colorDrinkBackground = "rgba(173, 216, 230, 0.3)";


        // 创建背景区域
        const createBackgroundArea = (svg) => svg.append("rect")
            .attr("class", "background-area")
            .attr("x", 0)
            .attr("y", 0)
            .attr("width", 0)
            .attr("height", height)
            .style("fill", colorDrinkBackground)
            .style("opacity", 0);

        // 初始化背景区域
        const drinkBackgrounds = {
            acceleration: createBackgroundArea(accelerationSvg),
            gyroscope: createBackgroundArea(gyroscopeSvg),
            angle: createBackgroundArea(angleSvg),
        };

        function updateBackgroundArea(path, startIndex, endIndex) {
            // 检查 startIndex 和 endIndex 是否为有效数值
            if (typeof startIndex === 'number' && typeof endIndex === 'number' && !isNaN(startIndex) && !isNaN(endIndex)) {
                const startX = xScale(startIndex);
                const endX = xScale(endIndex);

                // 检查 startX 和 endX 是否为有效数值
                if (!isNaN(startX) && !isNaN(endX)) {
                    path.attr("x", startX)
                        .attr("width", Math.max(0, endX - startX))
                        .style("opacity", 1);
                } else {
                    console.warn("Invalid startX or endX:", startX, endX);
                    path.style("opacity", 0);
                }
            } else {
                console.warn("Invalid startIndex or endIndex:", startIndex, endIndex);
                path.style("opacity", 0);
            }
        }

        // 重置背景区域
        function resetBackgroundArea() {
            Object.values(drinkBackgrounds).forEach(path => {
                path.style("opacity", 0);
            });
        }




        
        function detectDrinkingBehavior(angle, currentIndex) {
            const currentTime = Date.now();

            switch (currentState) {
                case "initial":
                    if (angle > -70 && angle < -40) {   // 范围尽量宽一些，不能错过
                        currentState = "start tilting";
                        // console.log("start tilting");
                    }
                    break;

                case "start tilting":
                    // if (angle >= -60 && angle < -10) {      // 慢慢地变到更小的角度，再开始计时
                    if (angle >= -60 && angle < -50) { 
                        currentState = "start tilting";
                        // stableStartTime = currentIndex;
                        // console.log("start tilting ----->");
                    }
                    if (angle >= -50 && angle < -1) {
                        currentState = "keep tilting";
                        stableStartTime = currentIndex;
                        // console.log("keep tilting");
                    }
                    else {
                        currentState = "initial";
                        // console.log("-----initial-----");
                    }
                    break;

                case "keep tilting":
                    if (angle > -50 && angle < -1) {
                        if (currentTime - stableStartTime > stableDurationThreshold) {
                            // console.log("Detected drinking behavior!");
                            currentState="drink";
                            // drinkStartIndex = currentIndex;
                            drinkStartIndex = stableStartTime;
                        }
                    } else {
                        currentState = "initial";
                        // console.log("back to -----initial-----");
                        resetBackgroundArea();
                        
                    }
                    break;
                
                case "drink":
                    if (angle > -50 && angle < -1) {
                        currentState="drink";
                        // console.log("Continue drinking!");
                        drinkStartIndex = Math.max(drinkStartIndex - 1, 0);
                        // console.log(drinkStartIndex);
                        // console.log(currentIndex);
                        // console.log("---------------------");
                        updateBackgroundArea(drinkBackgrounds.acceleration, drinkStartIndex, currentIndex);
                        updateBackgroundArea(drinkBackgrounds.gyroscope, drinkStartIndex, currentIndex);
                        updateBackgroundArea(drinkBackgrounds.angle, drinkStartIndex, currentIndex);

                    } else {
                        currentState = "initial";
                        // console.log("stop drinking, back to -----initial-----");
                                        // 记录喝水行为
                        
                        const endTime = currentTime;
                        const amount = Math.floor(Math.random() * (500 - 10 + 1)) + 10;  // 统一设为 100ml
                        recordWaterIntake(stableStartTime, endTime, amount);
                        
                        
                        resetBackgroundArea();
                    }
                    break;                
               
                default:
                    currentState = "initial";
            }
        }







        let currentIndex = 0;

        // 获取传感器数据的函数
        function getData() {
            fetch(SERVERADDRESS, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(dataResponse => {
                const sensorValues = dataResponse.sensorValues;
                document.getElementById('sensorValues').innerText = sensorValues.join(", ");

                // 更新加速度数据
                if (accelerationData.x.length >= 50) {
                    accelerationData.x.shift();
                    accelerationData.y.shift();
                    accelerationData.z.shift();
                }
                accelerationData.x.push(sensorValues[0]);
                accelerationData.y.push(sensorValues[1]);
                accelerationData.z.push(sensorValues[2]);

                // 更新陀螺仪数据
                if (gyroscopeData.x.length >= 50) {
                    gyroscopeData.x.shift();
                    gyroscopeData.y.shift();
                    gyroscopeData.z.shift();
                }
                gyroscopeData.x.push(sensorValues[3]);
                gyroscopeData.y.push(sensorValues[4]);
                gyroscopeData.z.push(sensorValues[5]);
                
                // 计算新的角度值
                const ax = sensorValues[0];
                const ay = sensorValues[1];
                const az = sensorValues[2];
                const calculatedAngle = Math.atan2(ax, Math.sqrt(ay * ay + az * az)) * (180 / Math.PI);

                // 更新页面显示
                document.getElementById('calculatedAngle').innerText = calculatedAngle.toFixed(2) + " degrees";

                if (angleData.length >= 50) {
                    angleData.shift();
                }
                angleData.push(calculatedAngle);
                detectDrinkingBehavior(calculatedAngle, currentIndex);
                currentIndex = Math.min(currentIndex + 1, 49)

                // 更新折线图
                updateChart(accelerationData, paths.acceleration, accelerationSvg, yScaleAcceleration);
                updateChart(gyroscopeData, paths.gyroscope, gyroscopeSvg, yScaleGyroscope);
                updateAngleChart(angleData, paths.angle, angleSvg, yScaleAngle);
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
        }

        // 每秒获取一次数据
        setInterval(getData, 100);





        // 在 JavaScript 中为条形图设置时间轴（横轴）和水量轴（纵轴）的比例尺：
        const waterChartMargin = { top: 20, right: 30, bottom: 40, left: 50 };
        const waterChartWidth = 600;
        const waterChartHeight = 300;

        const waterXScale = d3.scaleTime()
            .range([0, waterChartWidth]);

        const waterYScale = d3.scaleLinear()
            .domain([0, 500]) // 假设最大水量是 500ml
            .range([waterChartHeight, 0]);

        const waterSvg = d3.select("#waterIntakeChart")
            .attr("width", waterChartWidth + waterChartMargin.left + waterChartMargin.right)
            .attr("height", waterChartHeight + waterChartMargin.top + waterChartMargin.bottom)
        .append("g")
            .attr("transform", `translate(${waterChartMargin.left},${waterChartMargin.top})`);

        waterSvg.append("g")
            .attr("class", "x-axis")
            .attr("transform", `translate(0,${waterChartHeight})`);

        waterSvg.append("g")
            .attr("class", "y-axis");

        waterSvg.append("text")
            .attr("class", "axis-label")
            .attr("x", -waterChartHeight / 2)
            .attr("y", -40)
            .attr("transform", "rotate(-90)")
            .text("Water Intake (ml)");


        let waterIntakeData = [];
        let drinkingStartTime = null; // 记录喝水行为的开始时间

        // 记录喝水行为数据
        function recordWaterIntake(startTime, endTime, amount) {
            const waterstartTime = new Date(); // 每次调用生成当前时间
            waterIntakeData.push({
                time: waterstartTime,
                amount: amount
            });
            console.log(`Recorded drinking: ${amount}ml at ${new Date(waterstartTime).toLocaleTimeString()}`);
            updateWaterIntakeChart();
        }

        // 更新条形图
        function updateWaterIntakeChart() {
            const startTime = waterIntakeData[0]?.time || new Date();
            const endTime = new Date();
            waterXScale.domain([startTime, endTime]);

            // 动态计算条形宽度
            // const barWidth = Math.max(1, (waterChartWidth / waterIntakeData.length) - 2);

            const padding = 2; // 条形间距
            const maxBarWidth = 5; // 设置条形的最大宽度
            const barWidth = Math.min(maxBarWidth, Math.max(1, (waterChartWidth / waterIntakeData.length) - padding));

            // 定义颜色比例尺
            const colorScale = d3.scaleLinear()
                .domain([0, 500]) // 假设水量范围是 0 到 500 ml
                .range(["#d0e7ff", "#003f88"]); // 从浅蓝到深蓝


            // 绑定数据
            // 用于将你的数据数组 waterIntakeData 和 SVG 图形元素建立一一对应关系，并通过键函数 d => d.time 确保每条数据的唯一性。
            // waterIntakeData = [
            //     { time: "2024-12-02T10:00:00", amount: 100 },
            //     { time: "2024-12-02T10:05:00", amount: 150 }
            // ];
            const bars = waterSvg.selectAll(".bar")
                .data(waterIntakeData, d => d.time);

            // 进入阶段
            bars.enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", d => waterXScale(d.time))
                .attr("y", d => waterYScale(d.amount))
                .attr("width", barWidth)
                .attr("height", d => waterChartHeight - waterYScale(d.amount))
                .style("fill", d => colorScale(d.amount));

            // 更新阶段
            bars.attr("x", d => waterXScale(d.time))
                .attr("y", d => waterYScale(d.amount))
                .attr("width", barWidth)
                .attr("height", d => waterChartHeight - waterYScale(d.amount))
                .style("fill", d => colorScale(d.amount)); // 根据 amount 动态更新颜色;

            // 退出阶段
            bars.exit().remove();

            // 更新坐标轴
            waterSvg.select(".x-axis").call(d3.axisBottom(waterXScale));
            waterSvg.select(".y-axis").call(d3.axisLeft(waterYScale));
        }

        // 自动更新横轴范围
        setInterval(() => {
            const endTime = new Date();
            const startTime = waterIntakeData[0]?.time || endTime;
            waterXScale.domain([startTime, endTime]);
            updateWaterIntakeChart();
        }, 1000);





    </script>
</body>
</html>